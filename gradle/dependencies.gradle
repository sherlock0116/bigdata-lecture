ext {
    versions = [:]
    libs = [:]
    availableScalaVersions = ['2.11', '2.12']
}

// Add Scala version
def defaultScala211Version = '2.11.8'
def defaultScala212Version = '2.12.11'
def defaultScala213Version = '2.13.2'

if (hasProperty('scalaVersion')) {
    if (scalaVersion == '2.11') {
        versions['scala'] = defaultScala211Version
    } else if (scalaVersion == '2.12') {
        versions['scala'] = defaultScala212Version
    } else if (scalaVersion == '2.13') {
        versions['scala'] = defaultScala213Version
    } else {
        versions['scala'] = scalaVersion
    }
} else {
    versions['scala'] = defaultScala212Version
}

/* Resolve base Scala version according to these patterns:
 1. generally available Scala versions (such as: 2.12.y and 2.13.z) corresponding base versions will be: 2.12 and 2.13 (respectively)
 2. pre-release Scala versions (i.e. milestone/rc, such as: 2.13.0-M5, 2.13.0-RC1, 2.14.0-M1, etc.) will have identical base versions;
    rationale: pre-release Scala versions are not binary compatible with each other and that's the reason why libraries include the full
    Scala release string in their name for pre-releases (see dependencies below with an artifact name suffix '_$versions.baseScala')
*/
if ( !versions.scala.contains('-') ) {
    versions['baseScala'] = versions.scala.substring(0, versions.scala.lastIndexOf("."))
} else {
    versions['baseScala'] = versions.scala
}

versions += [
        gradleVersionsPlugin: '0.28.0',
        antlr: '4.5.3',
        calcite: '1.18.0',
        commonsCodec: '1.15',
        commonsIo: '2.4',
        commonsLang: '3.8.1',
        curator: '5.1.0',
        erupt: '1.7.3',
        flink: '1.11.3',
        gradle: '5.6.4',
        gson: '2.8.5',
        hadoop: '2.7.7',
        hamcrest: '2.2',
        hive: '2.3.7',
        jldap: '4.3',
        junit: '4.12',
        jupiter: '5.6.0',
        json4s: '3.6.9',
        jackson: '2.9.8',
        kafka: '2.4.1',
        lombok: '1.16.20',
        log4j: '1.2.17',
        mybatisPlus: '3.3.2',
        mysqlDriver: '8.0.11',
        scalaLogging: '3.9.2',
        scalatest: '3.1.1',
        springboot: '2.1.0.RELEASE',
        springbootAdmin: '2.1.0',
        slf4j: '1.7.30',
        spark: '2.4.7',
        thrift: '0.14.1',
        zinc: '1.3.5',
        zookeeper: '3.5.8'
]

libs += [
        antlr4: "org.antlr:antlr4:$versions.antlr",
        antlr4Runtime: "org.antlr:antlr4-runtime:$versions.antlr",
        calciteCore: "org.apache.calcite:calcite-core:$versions.calcite",
        // commons
        commonsCodec: "commons-codec:commons-codec:${versions.commonsCodec}",
        commonsIo: "commons-io:commons-io:${versions.commonsIo}",
        commonsLang: "org.apache.commons:commons-lang3:${versions.commonsLang}",
        // curator
        curatorFramework: "org.apache.curator:curator-framework:$versions.curator",
        curatorRecipes: "org.apache.curator:curator-recipes:$versions.curator",
        // erupt
        eruptUpms: "xyz.erupt:erupt-upms:$versions.erupt",
        eruptSecurity: "xyz.erupt:erupt-security:$versions.erupt",
        eruptWeb: "xyz.erupt:erupt-web:$versions.erupt",
        // flink
        flinkCore: "org.apache.flink:flink-core:$versions.flink",
        flinkClients: "org.apache.flink:flink-clients_$versions.baseScala:$versions.flink",
        flinkJava: "org.apache.flink:flink-java:$versions.flink",
        flinkStreamJava: "org.apache.flink:flink-streaming-java_$versions.baseScala:$versions.flink",
        flinkScala: "org.apache.flink:flink-scala_$versions.baseScala:$versions.flink",
        flinkStreamScala: "org.apache.flink:flink-streaming-scala_$versions.baseScala:$versions.flink",
        flinkYarn: "org.apache.flink:flink-yarn_$versions.baseScala:$versions.flink",
        flinkJavaTableApi: "org.apache.flink:flink-table-api-java:$versions.flink",
        flinkJavaTableApiBridge: "org.apache.flink:flink-table-api-java-bridge_$versions.baseScala:$versions.flink",
        flinkScalaTableApi: "org.apache.flink:flink-table-api-scala_$versions.baseScala:$versions.flink",
        flinkScalaTableApiBridge: "org.apache.flink:flink-table-api-scala-bridge_$versions.baseScala:$versions.flink",
        flinkPlanner: "org.apache.flink:flink-table-planner_$versions.baseScala:$versions.flink",
        blinkPlanner: "org.apache.flink:flink-table-planner-blink_$versions.baseScala:$versions.flink",
        flinkBackendRocksDB: "org.apache.flink:flink-statebackend-rocksdb_$versions.baseScala:$versions.flink",
        flinkConnectorKafka010: "org.apache.flink:flink-connector-kafka-0.10_$versions.baseScala:$versions.flink",
        flinkConnectorKafka: "org.apache.flink:flink-connector-kafka_$versions.baseScala:$versions.flink",
        flinkConectorFileSystem: "org.apache.flink:flink-connector-filesystem_$versions.baseScala:$versions.flink",
        flinkParquet: "org.apache.flink:flink-parquet_$versions.baseScala:$versions.flink",
        gson: "com.google.code.gson:gson:$versions.gson",
        // hadoop
        hadoopClient: "org.apache.hadoop:hadoop-client:$versions.hadoop",
        hadoopCommon: "org.apache.hadoop:hadoop-common:$versions.hadoop",
        hadoopHdfs: "org.apache.hadoop:hadoop-hdfs:$versions.hadoop",
        // hive
        hcatalogClient: "org.apache.hive.hcatalog:hive-webhcat-java-client:$versions.hive",
        hiveMetastore: "org.apache.hive:hive-metastore:$versions.hive",
        hamcrest: "org.hamcrest:hamcrest:$versions.hamcrest",
        // json
        jacksonDatabind: "com.fasterxml.jackson.core:jackson-databind:$versions.jackson",
        json4sJackson: "org.json4s:json4s-jackson_$versions.baseScala:$versions.json4s",
        // junit
        junit: "junit:junit:$versions.junit",
        jupiterApi: "org.junit.jupiter:junit-jupiter-api:${versions.jupiter}",
        jupiterEngine: "org.junit.jupiter:junit-jupiter-engine:${versions.jupiter}",
        vintageEngine: "org.junit.vintage:junit-vintage-engine:${versions.jupiter}",
        junitScalatest: "co.helmethair:scalatest-junit-runner:0.1.8",
        // kafka
        kafkaClients: "org.apache.kafka:kafka-clients:$versions.kafka",
        // ldap
        jldap: "com.novell.ldap:jldap:${versions.jldap}",
        // thrift
        libthrift: "org.apache.thrift:libthrift:$versions.thrift",
        // lombok
        lombok: "org.projectlombok:lombok:$versions.lombok",
        // log4j
        log4j: "log4j:log4j:$versions.log4j",
        // mybatis plus
        mybatisPlus: "com.baomidou:mybatis-plus:$versions.mybatisPlus",
        mybatisPlusStarter: "com.baomidou:mybatis-plus-boot-starter:$versions.mybatisPlus",
        // mysql
        mysqlDriver: "mysql:mysql-connector-java:$versions.mysqlDriver",
        // scala
        scalaLibrary: "org.scala-lang:scala-library:$versions.scala",
        scalaCompiler: "org.scala-lang:scala-compiler:$versions.scala",
        scalaReflect: "org.scala-lang:scala-reflect:$versions.scala",
        scalaLogging: "com.typesafe.scala-log:scala-logging_$versions.baseScala:$versions.scalaLogging",
        scalatest: "org.scalatest:scalatest_$versions.baseScala:$versions.scalatest",
        // slf4j
        slf4jApi: "org.slf4j:slf4j-api:$versions.slf4j",
        slf4jTolog4j: "org.slf4j:slf4j-log4j12:$versions.slf4j",
        // spark
        sparkCore: "org.apache.spark:spark-core_$versions.baseScala:$versions.spark",
        sparkSql: "org.apache.spark:spark-sql_$versions.baseScala:$versions.spark",
        sparkStreaming:"org.apache.spark:spark-streaming_$versions.baseScala:$versions.spark",
        sparkStreamingBindKafka08: "org.apache.spark:spark-streaming-kafka-0-8_$versions.baseScala:$versions.spark",
        sparkStreamingBindKafka010: "org.apache.spark:spark-streaming-kafka-0-10_$versions.baseScala:$versions.spark",
        sparkHive: "org.apache.spark:spark-hive_$versions.baseScala:$versions.spark",
        // zk
        zookeeper: "org.apache.zookeeper:zookeeper:$versions.zookeeper"
]